<application>
  <component name="AppStorage">
    <histories>
      <item value="Class Applier" />
      <item value="Watch this part in video" />
      <item value="Center your columns by adding a class of `.small-centered` to your column. Large will inherit small centering by default, but you can also center solely on large by applying a `.large-centered` class. To uncenter on large screens, use `.large-uncentered`." />
      <item value="Centered Columns" />
      <item value="Scale the browser down to a medium size to see the difference." />
      <item value="There are times when you won't want each media query to be collapsed or uncollapsed. In this case, use the media query size you want and collapse or uncollapse and add that to your row element. Example shows no gutter at small media size and then adds the gutter to columns at medium." />
      <item value="The `.collapse` class lets you remove column gutters (padding)." />
      <item value="Collapse/Uncollapse Rows" />
      <item value="You can also explicitly set the gutter size for a particular grid row by adding the `.gutter-[size]` class. This is useful when your using responsive gutters but specific components need static gutters." />
      <item value="If you prefer using one gutter size for every breakpoint, just use a single number for the `$grid-column-gutter` variable:" />
      <item value="Static Gutters" />
      <item value="To add more gutter definitions, add new lines to the map. The breakpoint names used here must match a breakpoint name in your project's `$breakpoints` map." />
      <item value="If you're using the Sass version of Foundation, you can change these defaults by editing the `$grid-column-gutter` variable map:" />
      <item value="The grid *gutter*&amp;mdash;the space between two columns in a row, and the space between the edge of a grid and the edge of the page&amp;mdash;is responsive, and becomes wider on larger screens." />
      <item value="In order to work around browsers' different rounding behaviors, Foundation will float the last column in a row to the right so the edge aligns. If your row doesn't have a count that adds up to 12 columns, you can tag the last column with a class of `.end` in order to override that behavior. Alternatively, you can set the `$grid-column-align-edge` variable to `false` to turn off this behavior entirely." />
      <item value="Incomplete Rows" />
      <item value="Move blocks up to 11 columns to the right by using classes like `.large-offset-1` and `.small-offset-3`." />
      <item value="You can nest the grids indefinitely, though at a certain point it will get absurd." />
      <item value="Normally, a row is always 1200 pixels wide. Make a row completely fluid by adding the `.expanded` class." />
      <item value="Column rows can use sizing classes like &lt;code&gt;.small-8&lt;/code&gt;, but only when used as a top-level container&amp;mdash;not when nested inside another row." />
      <item value="If you have just a single column, you can save some markup by combining the `.row` and `.column` classes together on the same element. You can still nest more grids inside this container like usual." />
      <item value="Combined Column/Row" />
      <item value="Medium sized screens will inherit styles from small, unless you specify a different layout using the medium grid classes." />
      <item value="Small grids expand to large screens easier than large grids cram into small screens." />
      <item value="Disabling the alias can reduce the Foundation CSS file size from 3 to 5%. It is recommended if the alias is not used." />
      <item value="the only difference is grammar." />
      <item value="see the &lt;a href=&quot;#sass-reference&quot;&gt;`$grid-column-alias` option&lt;/a&gt;" />
      <item value="By default `.column` has an alias `.columns`" />
      <item value="Code for small screens first, and larger devices will inherit those styles. Customize for larger screens as necessary." />
      <item value="Foundation is mobile-first." />
      <item value="Start by adding an element with a class of `.row`. This will create a horizontal block to contain vertical columns. Then add elements with a `.column` class within that row. Specify the widths of each column with the `.small-#`, `.medium-#`, and `.large-#` classes." />
      <item value="In Sass: set both `$xy-grid` and `$global-flexbox` to `false`." />
      <item value="In CDN link or package managers: import `foundation-float.css` in place of `foundation.css`." />
      <item value="To use the Float Grid in Foundation v6.4+, you need to:" />
      <item value="Unless you need to support IE 10, it is recommended to use the XY Grid." />
      <item value="replaced by the new" />
      <item value="From Foundation v6.4, the Float Grid is disabled by default" />
      <item value="Get registered for an upcoming Foundation training" />
      <item value="Become a master of the Foundation Grids to create complex layouts faster and with less code. The new XY Grid is the newest and most powerful version. Stay up-to-date with all the new features in Foundation 6.4 and learn how to migrate to the XY Grid with our online webinar training. Youâ€™ll also learn all the useful UI components and Foundation JavaScript to really crush your projects." />
      <item value="Create powerful multi-device layouts quickly and easily with the default 12-column, nestable Foundation grid. If you're familiar with grid systems, you'll feel right at home. If not, you'll learn quickly." />
      <item value="That outputs this CSS:" />
      <item value="Here's an example:" />
      <item value="Refer to the Sass documentation [below](#xy-grid-layout) for the full list of arguments." />
      <item value="child selector" />
      <item value="number of columns" />
      <item value="By default the mixin takes 2 parameters:" />
      <item value="Use the `xy-grid-layout()` mixin to create your own block grid." />
      <item value="Custom Block Grid" />
      <item value="Refer to the Sass documentation below to learn how each mixin works and the available arguments." />
      <item value="Pair `xy-cell` with the `breakpoint()` mixin to make your grid responsive." />
    </histories>
  </component>
</application>