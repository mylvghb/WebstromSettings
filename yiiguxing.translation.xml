<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="469" />
    <option name="newTranslationDialogY" value="510" />
    <histories>
      <item value="ensure the offsets are equal first since they are cheaper to check." />
      <item value="Check if a point is exactly equal to another." />
      <item value="Transform the path ref's current value by an operation." />
      <item value="Transform" />
      <item value="`PathRef` objects keep a specific path in a document synced over time as new operations are applied to the editor. You can access their `current` property at any time for the up-to-date path value." />
      <item value="If the old and new path are the same, it's a no-op." />
      <item value="Exit early if the operation is guaranteed not to have an effect." />
      <item value="PERF" />
      <item value="Transform a path by an operation." />
      <item value="Get a path relative to an ancestor." />
      <item value="Given a path, get the path to the previous sibling node." />
      <item value="Given a path, return a new path referring to the parent node above it." />
      <item value="Given a path, get the path to the next sibling node." />
      <item value="heck if a path is a sibling of another." />
      <item value="Check is a value implements the `Path` interface." />
      <item value="Check if a path is the parent of another." />
      <item value="Check if a path is a descendant of another." />
      <item value="Check if a path is equal to or an ancestor of another." />
      <item value="Check if a path is after another." />
      <item value="Check if the path of previous sibling node exists" />
      <item value="Check if a path ends after one of the indexes in another." />
      <item value="Get the common ancestor path of two paths." />
      <item value="inverse" />
      <item value="Check if a value is a list of `Operation` objects." />
      <item value="Check of a value is a `NodeOperation` object." />
      <item value="Check if an text matches set of properties." />
      <item value="Check if some props are a partial of Text." />
      <item value="Check if a value is a list of `Text` objects." />
      <item value="loose" />
      <item value="Check if a value implements the `Text` interface." />
      <item value="Check if two text nodes are equal." />
      <item value="along with any formatting properties" />
      <item value="along with" />
      <item value="`Text` objects represent the nodes that contain the actual text content of a Slate document along with any formatting properties. They are always leaf nodes in the document tree as they cannot contain any children." />
      <item value="Extendable Custom Types Interface" />
      <item value="decorate" />
      <item value="edge" />
      <item value="Get the ancestor above a location in the document." />
      <item value="Shortcuts" />
      <item value="Tab List Underlay" />
      <item value="Underlay" />
      <item value="examples more challenging. No idea how any of this works." />
      <item value="Disable SSR because it results in a double rendering which makes debugging" />
      <item value="Mentions" />
      <item value="Huge" />
      <item value="Check if an element is empty, accounting for void nodes." />
      <item value="Get the point before a location." />
      <item value="Get the point after a location." />
      <item value="Add a custom property to the leaf text nodes in the current selection." />
      <item value="Define CodeElement component" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="106" />
        <entry key="ENGLISH" value="107" />
        <entry key="FRENCH" value="2" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1614578584643" />
  </component>
</application>