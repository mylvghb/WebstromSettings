<application>
  <component name="AppStorage">
    <histories>
      <item value="Convers the breakpoints map to a URL-encoded string, like this: `key1=value1&amp;key2=value2`. The value is then dropped into the CSS for a special `&lt;meta&gt;` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place." />
      <item value="If the breakpoint is &quot;0px and larger&quot;, outputs the content as-is. Otherwise, outputs the content wrapped in a media query." />
      <item value="Breakpoint name, or px, rem, or em value to process." />
      <item value="If an em value is passed, the value will be used as-is." />
      <item value="If a rem value is passed, the unit will be changed to em." />
      <item value="If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base." />
      <item value="If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there." />
      <item value="Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:" />
      <item value="Map of font stacks to retrieve a list from." />
      <item value="Return a font stack list from a map. Equivalent to `map-safe-get($name, $-zf-font-stack)`." />
      <item value="`UP` RANGES USE THE FORMAT `(MIN-WIDTH: N)`" />
      <item value="unless the function was called as &quot;small down&quot;, in which case it's just &quot;small only&quot;" />
      <item value="Skip media query creation if input value is exactly &quot;0 down&quot;," />
      <item value="`down` ranges use the format `(max-width: n)`" />
      <item value="Only use &quot;max-width&quot; if there's a ceiling" />
      <item value="Only add &quot;and&quot; to the media query if there's a ceiling" />
      <item value="Only use &quot;min-width&quot; if the floor is greater than 0" />
      <item value="Only named media queries can have an &quot;only&quot; range" />
      <item value="`only` ranges use the format `(min-width: n) and (max-width: n)`" />
      <item value="It's a numeric breakpoint that resolved to &quot;0 &quot; + anything" />
      <item value="It's a named breakpoint that resolved to &quot;0 down&quot; or &quot;0 up&quot;" />
      <item value="Conditions to skip media query creation" />
      <item value="Use a precision under 1px to support browser zoom, but not to low to avoid rounding." />
      <item value="Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125)." />
      <item value="ax value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125)." />
      <item value="Convert any pixel, rem, or unitless value to em" />
      <item value="Try to pull a named breakpoint out of the $breakpoints map" />
      <item value="Orientation media queries have a unique syntax" />
      <item value="Is it a named media query?" />
      <item value="Eventual output" />
      <item value="Direction of media query" />
      <item value="Direction of media query (up, down, or only)" />
      <item value="Value for max-width media queries" />
      <item value="Size or keyword" />
      <item value="Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are." />
      <item value="All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map." />
      <item value="The largest named breakpoint in which to include print as a media type" />
      <item value="A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries." />
      <item value="justify" />
      <item value="zf-flex-justify" />
      <item value="A modifier to be applied to each text input type (e.g. a class or a pseudo-class). Leave blank to ignore." />
      <item value="A list of text input types to use. Leave blank to use all of them." />
      <item value="Generates a selector with every text input type. You can also filter the list to only output a subset of those selectors." />
      <item value="Transfers the colors in the `$foundation-palette` map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase." />
      <item value="color key from foundation-palette" />
      <item value="Get color from foundation-palette" />
      <item value="Threshold of lightness to check against." />
      <item value="Amount to scale up or down." />
      <item value="Color to scale." />
      <item value="Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="199" />
        <entry key="ENGLISH" value="200" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
</application>