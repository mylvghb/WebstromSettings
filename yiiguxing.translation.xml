<application>
  <component name="AppStorage">
    <histories>
      <item value="will open a Reveal modal with id `reveal`" />
      <item value="this will include every plugin and utility required by Foundation" />
      <item value="alternative" />
      <item value="expand" />
      <item value="The media query helper broadcasts an event on the window every time the breakpoint changes. We use this internally with plugins like Interchange to detect a shift in breakpoint. You can also subscribe to the event yourself." />
      <item value="Watching for Breakpoint Changes" />
      <item value="To get the media query of a breakpoint, use `MediaQuery.get`." />
      <item value="To see if the screen is currently a certain breakpoint, use `MediaQuery.is`." />
      <item value="To see if the screen is currently a certain breakpoint or larger, use `MediaQuery.atLeast`." />
      <item value="Get the name of the current breakpoint with `MediaQuery.current`." />
      <item value="The MediaQuery utility uses the Sass breakpoint settings and requires the Foundation CSS to be imported. For Sass users, you need to include either `foundation-everything()` or `foundation-global-styles()`." />
      <item value="The Foundation JavaScript includes a set of helper functions for working with media queries. They're all on the `Foundation.MediaQuery` object." />
      <item value="Working with Media Queries" />
      <item value="This can be used to combine multiple media queries together." />
      <item value="The functionality of the `breakpoint()` mixin comes from an internal function, also called `breakpoint()`. If you want to write your own media queries, you can use the `breakpoint()` function to access the logic of the mixin directly." />
      <item value="Lastly, there are three special media queries that are not width-based: `portrait`, `landscape`, and `retina`. Using these keywords with the `breakpoint()` mixin will output a media query for device orientation or pixel density, rather than screen width." />
      <item value="t's also possible to pass in custom values. You can enter a pixel, rem, or em value&amp;mdash;all values are converted to em at the end." />
      <item value="The behavior of the media query can be changed by adding the keyword `down` or `only` after the breakpoint value, separated by a space." />
      <item value="To use the mixin, call it with `@include`, and then include the CSS content you want inside the curly braces." />
      <item value="Our `breakpoint()` mixin makes it easy to write media queries. You can use the named breakpoints, or a custom pixel, rem, or em value." />
      <item value="The Breakpoint Mixin" />
      <item value="For example, to get `.xlarge` classes in your CSS, for use in the grid, Menu, and more, just add it to the end of the list:" />
      <item value="You can change that by modifying the `$breakpoint-classes` variable in your settings file. This is a list of breakpoint names. Adding or removing names from the list will change the CSS class output. It looks like this by default:" />
      <item value="Changing the widths of any of the breakpoints is as easy as changing the pixel values in this map. Note that here there are two extra breakpoints: `xlarge` and `xxlarge`. We don't use these for any components, and also don't output any CSS classes that use them by default." />
      <item value="Even though the above values are in pixels, they're converted to ems at the end for use in media queries." />
      <item value="If you're using the Sass version of Foundation, the default breakpoints can be changed. The names of the breakpoints, and their widths, are stored in a `$breakpoints` variable in the settings file." />
      <item value="Changing the Breakpoints" />
      <item value="With this:" />
      <item value="to upgrade your existing media queries, replace rulesets like this:" />
      <item value="In Foundation 5, breakpoints were accessed using a series of Sass variables named `$small-up`, `$small-only`, `$medium-only`, and so on. In Foundation 6, this method of writing media queries has been replaced with a dedicated [breakpoint mixin](#the-breakpoint-mixin), described below. **The legacy variables will be removed in Foundation 6.3.**" />
      <item value="Upgrading from Foundation 5" />
      <item value="If you're using the CSS version of Foundation, use these media queries to imitate the three core breakpoints:" />
      <item value="Many components can be modified at different screen sizes using special *breakpoint classes*. The grid is the most obvious example. In the code below, the left-hand column is six columns wide on small screens, hence `.small-6`. On medium-sized screens, the class `.medium-4` overrides the small style, changing the column to be four wide." />
      <item value="any screen 1024 pixels or wider." />
      <item value="any screen 640 pixels or wider." />
      <item value="any screen." />
      <item value="Foundation for Sites has three core breakpoints:" />
      <item value="Default Media Queries" />
      <item value="Get registered" />
      <item value="Build better websites and apps, code cleaner, and become a better front-end developer with Foundation training. We're running two online webinar training sessions this month where we break down how to get the most out of Foundation and leap ahead skillwise." />
      <item value="CSS media queries allow us to adjust the display and orientation of content at different screen sizes." />
      <item value="is a function&lt;span data-tooltip title=&quot;Goodbye ZURB, I'll miss you&quot;&gt; &lt;/span&gt; that returns the string of the properly vendor-prefixed version of `transitionend` events. Most browsers don't require a prefix these days, but for those that do, we've got you covered. But IE 9 doesn't support transitions?? Quite right you are! In that case, our plugins that use transitions will simply snap to whatever location or visibility state they were headed to, and this function will fire a `transitionend` event manually on the element you passed. It still gives the desired results, and allows Motion-UI to work in IE 9." />
      <item value="returns a string representation of a named function. Seems small, but believe usâ€”it's useful." />
      <item value="returns a base-36, pseudo-random string with a hyphenated namespace (if you include one). Both arguments are optional; by default, it will return a string six characters long." />
      <item value="Foundation includes a couple useful features in the core library that are used in many places, that you can tap into." />
      <item value="Miscellaneous" />
      <item value="Besides these useful click triggers, there are also other listeners for you to tap into. Need to know when the window has been resized, but only when it's done resizing? How about a debounced scroll event? Add this markup and JavaScript and you're good to go!" />
      <item value="Provides a number of event listeners and triggers your script can hook into. Most are self-explanatory, and used in many Foundation plugins." />
      <item value="Allows you to add `swipe*` and pseudo-drag events to elements." />
      <item value="This will execute your callback function after all the images in your jQuery collection have loaded." />
    </histories>
  </component>
</application>