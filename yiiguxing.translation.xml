<application>
  <component name="AppStorage">
    <histories>
      <item value="It's a numeric breakpoint that resolved to &quot;0 &quot; + anything" />
      <item value="It's a named breakpoint that resolved to &quot;0 down&quot; or &quot;0 up&quot;" />
      <item value="Conditions to skip media query creation" />
      <item value="Use a precision under 1px to support browser zoom, but not to low to avoid rounding." />
      <item value="Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125)." />
      <item value="ax value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125)." />
      <item value="Convert any pixel, rem, or unitless value to em" />
      <item value="Try to pull a named breakpoint out of the $breakpoints map" />
      <item value="Orientation media queries have a unique syntax" />
      <item value="Is it a named media query?" />
      <item value="Eventual output" />
      <item value="Direction of media query" />
      <item value="Direction of media query (up, down, or only)" />
      <item value="Value for max-width media queries" />
      <item value="Size or keyword" />
      <item value="Breakpoint name, or px, rem, or em value to process." />
      <item value="Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are." />
      <item value="All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map." />
      <item value="The largest named breakpoint in which to include print as a media type" />
      <item value="A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries." />
      <item value="justify" />
      <item value="zf-flex-justify" />
      <item value="A modifier to be applied to each text input type (e.g. a class or a pseudo-class). Leave blank to ignore." />
      <item value="A list of text input types to use. Leave blank to use all of them." />
      <item value="Generates a selector with every text input type. You can also filter the list to only output a subset of those selectors." />
      <item value="Transfers the colors in the `$foundation-palette` map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase." />
      <item value="color key from foundation-palette" />
      <item value="Get color from foundation-palette" />
      <item value="Threshold of lightness to check against." />
      <item value="Amount to scale up or down." />
      <item value="Color to scale." />
      <item value="Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness." />
      <item value="the color from `$colors` (list of colors) that has the most contrast." />
      <item value="Contrast tolerance." />
      <item value="Color to check luminance." />
      <item value="Checks the luminance of `$base`, and returns the color from `$colors` (list of colors) that has the most contrast." />
      <item value="The contrast ratio of the compared colors." />
      <item value="Checks the contrast ratio of two colors." />
      <item value="luminance" />
      <item value="Used direction between &quot;top&quot;, &quot;right&quot;, &quot;bottom&quot; and &quot;left&quot;." />
      <item value="Calculate the opposite place in a circle, with a starting index of 1" />
      <item value="$demi" />
      <item value="Returns the opposite direction of $dir" />
      <item value="Map to retrieve a value from." />
      <item value="Safely return a value from a map." />
      <item value="Depending on the flag, returns either $keys or $values or both." />
      <item value="Map to pull a value from." />
      <item value="The value found in the map." />
      <item value="Keys to use when looking for a value." />
      <item value="Border component to extract." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="174" />
        <entry key="ENGLISH" value="175" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
</application>