<application>
  <component name="AppStorage">
    <histories>
      <item value="pollute" />
      <item value="Instrumentation" />
      <item value="don't trigger if target is something up in the prototype chain of original" />
      <item value="Debugger Event" />
      <item value="effect" />
      <item value="Conceptually" />
      <item value="only a whitelist of value types can be observed." />
      <item value="Make a map and return a function for checking if a key" />
      <item value="Make a map" />
      <item value="target is already a Proxy" />
      <item value="target already has corresponding Proxy" />
      <item value="Feature flags" />
      <item value="bail out on types that shouldn't be unwrapped" />
      <item value="Bail Types" />
      <item value="using literal strings instead of numbers so that it's easier to inspect // debugger events" />
      <item value="inspect" />
      <item value="Check if two values are loosely equal - that is" />
      <item value="hyphenate" />
      <item value="This flag is mutually // exclusive with CLASS, STYLE and PROPS." />
      <item value="Indicates an element that has non-class/style dynamic props." />
      <item value="expects Lower Case" />
      <item value="dummy" />
      <item value="scheduler" />
      <item value="should discover new branches while running automatically" />
      <item value="should make nested properties reactive" />
      <item value="should be reactive" />
      <item value="should hold a value" />
      <item value="built-ins should work and return same value" />
      <item value="should not pollute original object with Proxies" />
      <item value="setting a property with an unobserved value should wrap with reactive" />
      <item value="observed value should proxy mutations to original (Object)" />
      <item value="cloned reactive Array should point to observed values" />
      <item value="reactives" />
      <item value="istanbul ignore else" />
      <item value="istanbul" />
      <item value="track" />
      <item value="preset" />
      <item value="immutability" />
      <item value="corresponding" />
      <item value="target is explicitly marked as readonly by user" />
      <item value="if trying to observe a readonly proxy, return the readonly version." />
      <item value="WeakMaps that store {raw &lt;-&gt; observed} pairs." />
      <item value="// Conceptually, it's easier to think of a dependency as a Dep class&#10;// which maintains a Set of subscribers, but we simply store them as" />
      <item value="The main WeakMap that stores {target -&gt; key -&gt; dep} connections" />
      <item value="mutable" />
      <item value="The implementation of this module is inspired by the following prior art in the JavaScript" />
      <item value="prior" />
      <item value="Credits" />
      <item value="Built-in objects are not observed except for `Map`, `WeakMap`, `Set` and `WeakSet`." />
      <item value="Caveats" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="88" />
        <entry key="ENGLISH" value="89" />
        <entry key="CATALAN" value="1" />
      </map>
    </option>
  </component>
</application>