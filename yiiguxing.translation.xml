<application>
  <component name="AppStorage">
    <histories>
      <item value="Without [defining a gutter type](#gutters) the cells will simply split up the space without any gutters." />
      <item value="The structure of XY grid uses `.grid-x`, `.grid-y`, and `.cell` as its base. Without [defining a gutter type](#gutters) the cells will simply split up the space without any gutters." />
      <item value="Basics" />
      <item value="You can manually generate the XY Grid with:" />
      <item value="If `$flex` is set to false, the float grid is used instead." />
      <item value="If `$xy-grid` is set to false, the flex grid is used." />
      <item value="It is present by default in `foundation.css` of CDN link or package managers. In Sass, it will be generated by default by `@include foundation-everything` (unless `$flex` or `$xy-grid` are set to false)" />
      <item value="XY grid is the default Foundation grid" />
      <item value="Importing" />
      <item value="The XY grid is supported in Chrome, Firefox, Safari 6+, IE10+, iOS 7+, and Android 4.4+. Flexbox is supported in Android 2, but not reliably enough for use with this grid. ([View Flexbox browser support.](http://caniuse.com/#feat=flexbox)) We recommend only using the XY grid on projects that can live with purely cutting-edge browser support." />
      <item value="The XY grid works very similarly to the standard float grid, but includes a number of useful features only possible with Flexbox, like horizontal and vertical alignment, automatic sizing and a full vertical grid." />
      <item value="Grid Basics" />
      <item value="Don’t miss out on the upcoming Foundation trainings" />
      <item value="The XY Grid is a huge advancement in Grids. Stay up-to-date with all the new features in Foundation 6.4 with our online webinar training. You’ll come away knowing the ins and outs of the XY Grid to create complex layouts faster and with less code. Not to mention all the useful UI components and Foundation JavaScript you’ll learn. You’ll make your coworkers jealous." />
      <item value="huge advancement" />
      <item value="A fully reworked new grid system in v6.4 which has all the variety inbuilt in the form of multiple grid types which includes margin grid, padding grid, frame grid, block grid and vertical grid." />
      <item value="will open a Reveal modal with id `reveal`" />
      <item value="this will include every plugin and utility required by Foundation" />
      <item value="alternative" />
      <item value="expand" />
      <item value="The media query helper broadcasts an event on the window every time the breakpoint changes. We use this internally with plugins like Interchange to detect a shift in breakpoint. You can also subscribe to the event yourself." />
      <item value="Watching for Breakpoint Changes" />
      <item value="To get the media query of a breakpoint, use `MediaQuery.get`." />
      <item value="To see if the screen is currently a certain breakpoint, use `MediaQuery.is`." />
      <item value="To see if the screen is currently a certain breakpoint or larger, use `MediaQuery.atLeast`." />
      <item value="Get the name of the current breakpoint with `MediaQuery.current`." />
      <item value="The MediaQuery utility uses the Sass breakpoint settings and requires the Foundation CSS to be imported. For Sass users, you need to include either `foundation-everything()` or `foundation-global-styles()`." />
      <item value="The Foundation JavaScript includes a set of helper functions for working with media queries. They're all on the `Foundation.MediaQuery` object." />
      <item value="Working with Media Queries" />
      <item value="This can be used to combine multiple media queries together." />
      <item value="The functionality of the `breakpoint()` mixin comes from an internal function, also called `breakpoint()`. If you want to write your own media queries, you can use the `breakpoint()` function to access the logic of the mixin directly." />
      <item value="Lastly, there are three special media queries that are not width-based: `portrait`, `landscape`, and `retina`. Using these keywords with the `breakpoint()` mixin will output a media query for device orientation or pixel density, rather than screen width." />
      <item value="t's also possible to pass in custom values. You can enter a pixel, rem, or em value&amp;mdash;all values are converted to em at the end." />
      <item value="The behavior of the media query can be changed by adding the keyword `down` or `only` after the breakpoint value, separated by a space." />
      <item value="To use the mixin, call it with `@include`, and then include the CSS content you want inside the curly braces." />
      <item value="Our `breakpoint()` mixin makes it easy to write media queries. You can use the named breakpoints, or a custom pixel, rem, or em value." />
      <item value="The Breakpoint Mixin" />
      <item value="For example, to get `.xlarge` classes in your CSS, for use in the grid, Menu, and more, just add it to the end of the list:" />
      <item value="You can change that by modifying the `$breakpoint-classes` variable in your settings file. This is a list of breakpoint names. Adding or removing names from the list will change the CSS class output. It looks like this by default:" />
      <item value="Changing the widths of any of the breakpoints is as easy as changing the pixel values in this map. Note that here there are two extra breakpoints: `xlarge` and `xxlarge`. We don't use these for any components, and also don't output any CSS classes that use them by default." />
      <item value="Even though the above values are in pixels, they're converted to ems at the end for use in media queries." />
      <item value="If you're using the Sass version of Foundation, the default breakpoints can be changed. The names of the breakpoints, and their widths, are stored in a `$breakpoints` variable in the settings file." />
      <item value="Changing the Breakpoints" />
      <item value="With this:" />
      <item value="to upgrade your existing media queries, replace rulesets like this:" />
      <item value="In Foundation 5, breakpoints were accessed using a series of Sass variables named `$small-up`, `$small-only`, `$medium-only`, and so on. In Foundation 6, this method of writing media queries has been replaced with a dedicated [breakpoint mixin](#the-breakpoint-mixin), described below. **The legacy variables will be removed in Foundation 6.3.**" />
      <item value="Upgrading from Foundation 5" />
      <item value="If you're using the CSS version of Foundation, use these media queries to imitate the three core breakpoints:" />
      <item value="Many components can be modified at different screen sizes using special *breakpoint classes*. The grid is the most obvious example. In the code below, the left-hand column is six columns wide on small screens, hence `.small-6`. On medium-sized screens, the class `.medium-4` overrides the small style, changing the column to be four wide." />
      <item value="any screen 1024 pixels or wider." />
    </histories>
  </component>
</application>