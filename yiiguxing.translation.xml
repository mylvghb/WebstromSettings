<application>
  <component name="AppStorage">
    <histories>
      <item value="That outputs this CSS:" />
      <item value="Here's an example:" />
      <item value="Refer to the Sass documentation [below](#xy-grid-layout) for the full list of arguments." />
      <item value="child selector" />
      <item value="number of columns" />
      <item value="By default the mixin takes 2 parameters:" />
      <item value="Use the `xy-grid-layout()` mixin to create your own block grid." />
      <item value="Custom Block Grid" />
      <item value="Refer to the Sass documentation below to learn how each mixin works and the available arguments." />
      <item value="Pair `xy-cell` with the `breakpoint()` mixin to make your grid responsive." />
      <item value="The cell size calculator can also be accessed as a function. This gives you the percentage value, without any of the grid cell CSS." />
      <item value="`xy-cell` accepts a few different keywords as well as specific sizes: `full` (full width), `auto` (automatic width) and `shrink` (take up only the space it needs)." />
      <item value="Use the `xy-cell()` mixin to create a cell. There are a number of ways to define the size of a cell." />
      <item value="Use the `xy-gutters()` mixin to add gutters to an item. The `xy-cell` mixin used this to output gutters, but you can use this to add responsive gutters to anything you like. This is especially powerful as you can specify where you want the gutters, like so:" />
      <item value="Use the `xy-grid()` mixin to create a grid." />
      <item value="Use the `xy-grid-container()` mixin to create a grid container. This contains the grid to the width specified in `$grid-container`." />
      <item value="XY grid CSS is generated with a powerful set of Sass mixins, which you can use in your own code to build a semantic grid." />
      <item value="Building Semantically" />
      <item value="Watch this part in video" />
      <item value="Here's an example of what you can do:" />
      <item value="Please note that to use `.grid-margin-x` or `.grid-margin-y` with `.grid-frame` you need to hide the overflow on the body like so: `body {overflow: hidden;}`. However, take care not to unintentionally hide overflow body content on small screens when using `.medium-grid-frame`." />
      <item value="To start, add `.grid-frame` to the grid. This sets the grid to be 100vh (the full height of the browser window)." />
      <item value="The XY grid incorporates the grid frame from Foundation for Apps plus many other useful features." />
      <item value="Please note for vertical grids to work, the grid needs a height. You can also use [grid frame](#grid-frame) to create a 100 vertical height grid (or 100% height if nested)." />
      <item value="You can also apply margin or padding with `.grid-margin-y` and `.grid-padding-y` to apply spacing to the top and bottom of cells." />
      <item value="The internal cells will shift automatically to provide spacing vertically rather than horizontally." />
      <item value="The XY grid also supports vertical grids. Simply apply `.grid-y` instead of `.grid-x`." />
      <item value="Push and pull are a bit of a hack solution and was only necessary for Float based grids. But for flexbox, this hack is not needed as [source ordering](flexbox-utilities.html#source-ordering) does this with ease." />
      <item value="Looking for Push/Pull" />
      <item value="Looking for Push/Pull?" />
      <item value="This example uses padding grid but this can be used with margin grid too." />
      <item value="To define cell widths within a direction-level, instead of the individual cell level, add the class `.[size]-up-[n]` to a `grid-x` or `grid-y`, where `[n]` is the number of cells to display per direction, and `[size]` is the breakpoint at which to apply the effect." />
      <item value="Block Grids" />
      <item value="Offsets work by applying `margin-left` (or `margin-top` for a vertical grid) to a grid." />
      <item value="There are times when you won't want each media query to be collapsed. In this case, use the media query size you want and collapse and add that to your grid element. Example shows gutters at small and no gutters on medium and up." />
      <item value="The `.[size]-[gutter-type]-collapse` class lets you remove cell gutters." />
      <item value="To switch back to the auto behavior from a percentage or shrink behavior, use the classes `.[size]-auto` or `.[size]-shrink`. In the below example, the cells stack on small screens, and become even-width on large screens." />
      <item value="Responsive Adjustments" />
      <item value="A cell can also be made to *shrink*, by adding the `.shrink` or `.[size]-shrink` class. This means it will only take up the space its contents need." />
      <item value="Multiple expanding cells will share the leftover space equally." />
      <item value="If the class `.auto` or `.[size]-auto` is added to the cell, it will take up the remaining space." />
      <item value="The best way to do this is:&amp;nbsp; `body {overflow-x: hidden;}`" />
      <item value="Please note that when you are using `grid-margin-x` on a `grid-container` with `full` class you will also need to hide the horizontal overflow in order for this to work correctly if your content is going to touch the sides of the viewport." />
      <item value="To stretch the content to the full width of the available space and remove grid container padding, simply add the class `full` to your `grid-container`. Note that this variation is primarily for use for the `grid-margin-x` - it works with `grid-padding-x` too, but will work the same as `.grid-container.fluid`." />
      <item value="Grid Container Full" />
      <item value="To stretch the content to the full width of the available space, simply add the class `fluid` to your `grid-container`." />
      <item value="The grid defaults to the full width of the available space. To contain it use the `grid-container` class. The container will be centered and have a max-width equal to your `$grid-container` setting (1200px by default), along with padding on the left/right equal to half your `$grid-container-padding` setting." />
      <item value="To define a grid type, simply set `.grid-margin-x` or `.grid-padding-x` on the grid." />
      <item value="The defining feature of the XY grid is the ability to use margin AND padding grids in harmony." />
      <item value="The defining feature of the XY grid is the ability to use margin AND padding grids in harmony. To define a grid type, simply set `.grid-margin-x` or `.grid-padding-x` on the grid." />
    </histories>
  </component>
</application>