<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="469" />
    <option name="newTranslationDialogY" value="510" />
    <histories>
      <item value="inverse" />
      <item value="Check if a value is a list of `Operation` objects." />
      <item value="Check of a value is a `NodeOperation` object." />
      <item value="Check if an text matches set of properties." />
      <item value="Check if some props are a partial of Text." />
      <item value="Check if a value is a list of `Text` objects." />
      <item value="loose" />
      <item value="Check if a value implements the `Text` interface." />
      <item value="Check if two text nodes are equal." />
      <item value="along with any formatting properties" />
      <item value="along with" />
      <item value="`Text` objects represent the nodes that contain the actual text content of a Slate document along with any formatting properties. They are always leaf nodes in the document tree as they cannot contain any children." />
      <item value="Extendable Custom Types Interface" />
      <item value="decorate" />
      <item value="edge" />
      <item value="Get the ancestor above a location in the document." />
      <item value="Shortcuts" />
      <item value="Tab List Underlay" />
      <item value="Underlay" />
      <item value="examples more challenging. No idea how any of this works." />
      <item value="Disable SSR because it results in a double rendering which makes debugging" />
      <item value="Mentions" />
      <item value="Huge" />
      <item value="Check if an element is empty, accounting for void nodes." />
      <item value="Get the point before a location." />
      <item value="Get the point after a location." />
      <item value="Add a custom property to the leaf text nodes in the current selection." />
      <item value="Define CodeElement component" />
      <item value="Get the leaves for a text node given decorations." />
      <item value="Text" />
      <item value="memoize" />
      <item value="Although the HTTP standard specifies &quot;unauthorized&quot;, semantically this response means &quot;unauthenticated&quot;. That is, the client must authenticate itself to get the requested response." />
      <item value="The client does not have access rights to the content, i.e. they are unauthorized, so server is rejecting to give proper response. Unlike 401, the client's identity is known to the server." />
      <item value="istanbul" />
      <item value="istanbul ignore next" />
      <item value="Korean" />
      <item value="deduplicate" />
      <item value="pseudo" />
      <item value="interpolation" />
      <item value="end Of Line" />
      <item value="trailing Comma" />
      <item value="semi" />
      <item value="unify" />
      <item value="Extract" />
      <item value="sticky" />
      <item value="asset size limit: The following asset(s) exceed the recommended size limit (244 KiB).&#10;This can impact web performance" />
      <item value="If the locale contains a territory and a dialect, this locale contains an implicit fallback." />
      <item value="Install i18n instance to make the whole app i18n-aware" />
      <item value="The structure of the locale message is the hierarchical object structure with each locale as the top property" />
      <item value="legacy" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="80" />
        <entry key="ENGLISH" value="81" />
        <entry key="FRENCH" value="2" />
        <entry key="JAPANESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1614578584643" />
  </component>
</application>