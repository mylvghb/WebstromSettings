<application>
  <component name="AppStorage">
    <histories>
      <item value="justify" />
      <item value="zf-flex-justify" />
      <item value="A modifier to be applied to each text input type (e.g. a class or a pseudo-class). Leave blank to ignore." />
      <item value="A list of text input types to use. Leave blank to use all of them." />
      <item value="Generates a selector with every text input type. You can also filter the list to only output a subset of those selectors." />
      <item value="Transfers the colors in the `$foundation-palette` map into variables, such as `$primary-color` and `$secondary-color`. Call this mixin below the Global section of your settings file to properly migrate your codebase." />
      <item value="color key from foundation-palette" />
      <item value="Get color from foundation-palette" />
      <item value="Threshold of lightness to check against." />
      <item value="Amount to scale up or down." />
      <item value="Color to scale." />
      <item value="Scales a color to be darker if it's light, or lighter if it's dark. Use this function to tint a color appropriate to its lightness." />
      <item value="the color from `$colors` (list of colors) that has the most contrast." />
      <item value="Contrast tolerance." />
      <item value="Color to check luminance." />
      <item value="Checks the luminance of `$base`, and returns the color from `$colors` (list of colors) that has the most contrast." />
      <item value="The contrast ratio of the compared colors." />
      <item value="Checks the contrast ratio of two colors." />
      <item value="luminance" />
      <item value="Used direction between &quot;top&quot;, &quot;right&quot;, &quot;bottom&quot; and &quot;left&quot;." />
      <item value="Calculate the opposite place in a circle, with a starting index of 1" />
      <item value="$demi" />
      <item value="Returns the opposite direction of $dir" />
      <item value="Map to retrieve a value from." />
      <item value="Safely return a value from a map." />
      <item value="Depending on the flag, returns either $keys or $values or both." />
      <item value="Map to pull a value from." />
      <item value="The value found in the map." />
      <item value="Keys to use when looking for a value." />
      <item value="Border component to extract." />
      <item value="Border value to find a value in." />
      <item value="Given border $val, find a specific element of the border, which is $elem. The possible values for $elem are width, style, and color." />
      <item value="no matter how many values were passed in. Use this function if you need to know the specific side of a value, but don't know if the value is using a shorthand format." />
      <item value="no matter how many values were passed in." />
      <item value="Determine" />
      <item value="A single value based on `$val` and `$side`." />
      <item value="Side to return. Should be `top`, `right`, `bottom`, or `left`." />
      <item value="Value to analyze. Should be a shorthand sizing property" />
      <item value="shorthand sizing property" />
      <item value="Value to analyze. Should be a shorthand sizing property, e.g. &quot;1em 2em 1em&quot;" />
      <item value="Determine a top/right/bottom/right value on a padding, margin, etc. property, no matter how many values were passed in. Use this function if you need to know the specific side of a value, but don't know if the value is using a shorthand format." />
      <item value="Determine if a value is not falsey, in CSS terms. Falsey values are `null`, `none`, `0` with any unit, or an empty list." />
      <item value="assume that line-heights greater than 10 are meant to be absolute in 'px'" />
      <item value="The font size to use to work out the line height - defaults to $global-font-size" />
      <item value="Value to convert to a unitless line height" />
      <item value="working out" />
      <item value="Converts a pixel, percentage, rem or em value to a unitless value based on a given font size. Ideal for working out unitless line heights." />
      <item value="Turn 0rem into 0" />
      <item value="Calculate rem if units for $value is not rem or em" />
      <item value="Transform em into rem if someone hands over 'em's" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="154" />
        <entry key="ENGLISH" value="155" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="FRENCH" value="1" />
      </map>
    </option>
  </component>
</application>