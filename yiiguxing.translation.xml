<application>
  <component name="AppStorage">
    <histories>
      <item value="Bail Types" />
      <item value="Recursively unwraps nested value bindings." />
      <item value="unwraps" />
      <item value="Check if two values are loosely equal" />
      <item value="Reserved" />
      <item value="Built-in objects are not observed except for" />
      <item value="The implementation of this module is inspired by the following prior art in the JavaScript ecosystem:" />
      <item value="Credits" />
      <item value="This package is inlined into Global &amp; Browser ESM builds of user-facing renderers (e.g. `@vue/runtime-dom`), but also published as a package that can be used standalone. The standalone build should not be used alongside a pre-bundled build of a user-facing renderer, as they will have different internal storage for reactivity connections. A user-facing renderer should re-export all APIs from this package." />
      <item value="This package is inlined into Global &amp; Browser ESM builds of user-facing renderers" />
      <item value="Usage Note" />
      <item value="reactivity" />
      <item value="consumption" />
      <item value="A special flag that indicates that the diffing algorithm should bail out // of optimized mode." />
      <item value="BAIL" />
      <item value="exclusive" />
      <item value="mutually" />
      <item value="when this flag is present" />
      <item value="present" />
      <item value="Indicates an element that has non-class/style dynamic props." />
      <item value="both get hoisted as" />
      <item value="The compiler pre-compiles static string styles into static objects" />
      <item value="hoists" />
      <item value="detects and hoists inline static objects" />
      <item value="Indicates an element with dynamic textContent (children fast path)" />
      <item value="Check the `patchElement` function in './createRenderer.ts' to see how the" />
      <item value="// Patch flags can be combined using the | bitwise operator and can be checked&#10;// using the &amp; operator, e.g." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="27" />
        <entry key="ENGLISH" value="28" />
      </map>
    </option>
  </component>
</application>